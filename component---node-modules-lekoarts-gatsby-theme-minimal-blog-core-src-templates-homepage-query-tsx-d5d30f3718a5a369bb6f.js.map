{"version":3,"sources":["webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/hero.mdx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/bottom.mdx","webpack:///./src/components/search.js","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/homepage.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/homepage-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/homepage.tsx"],"names":["name","Text","props","console","warn","layoutProps","_frontmatter","MDXContent","components","mdxType","sx","fontSize","fontWeight","mb","fontStyle","href","isMDXComponent","TwitterOperators","Search","useState","searchText","setSearchText","as","onSubmit","e","preventDefault","window","open","encodeURIComponent","flex","mr","onChange","target","value","type","ml","opacity","cursor","icon","faExternalLinkAlt","Homepage","posts","p","HomepageComponent","allPost","data","nodes","query"],"mappings":"mNAKO,IAEeA,EAKhBC,GALgBD,EAKK,OALG,SAA6BE,GAEzD,OADAC,QAAQC,KAAK,aAAeJ,EAAO,2EAC5B,oBAASE,KAIZG,EAAc,CAClBC,aAT0B,IAYb,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGN,E,oIACF,mBACD,OAAO,cALS,UAKT,iBAAeG,EAAiBH,EAAhC,CAAuCM,WAAYA,EAAYC,QAAQ,cAC5E,cAACR,EAAD,CAAMS,GAAI,CACRC,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,OACZC,GAAI,CAAC,EAAG,EAAG,IACVJ,QAAQ,QAJX,mBAKA,cAACR,EAAD,CAAMS,GAAI,CACRC,SAAU,CAAC,EAAG,EAAG,GACjBG,UAAW,SACXF,WAAY,KACXH,QAAQ,QAJX,gFAKA,mBAAGM,KAAK,sCAAR,2BAKJR,EAAWS,gBAAiB,EChCrB,IAODX,EAAc,CAClBC,aAR0B,IAWb,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGN,E,oIACF,mBACD,OAAO,cALS,UAKT,iBAAeG,EAAiBH,EAAhC,CAAuCM,WAAYA,EAAYC,QAAQ,eAKhFF,EAAWS,gBAAiB,E,wCCatBC,EAAmB,kBACvB,yBACE,yBACE,sBACE,kCACA,2CAGJ,yBACE,sBACE,wCACA,gGAEF,sBACE,sBACE,0BADF,aACoB,2BAEpB,oEAEF,sBACE,8BACO,2BADP,SAGA,wEAEF,sBACE,8BACO,0BADP,QAGA,4DAEF,sBACE,sBACE,0BADF,SAGA,0DAEF,sBACE,sBACE,8BADF,cAGA,yDAEF,sBACE,sBACE,4BADF,cAGA,uDAEF,sBACE,sBACE,0BADF,YAGA,yDAEF,sBACE,sCACe,8BADf,mBAGA,kGAEF,sBACE,sBACE,8BADF,OACkB,gCADlB,QAGA,yDAEF,sBACE,mCACY,+BADZ,cAGA,oGAEF,sBACE,6BACM,+BADN,cAGA,6EAEF,sBACE,mCACY,sCAEZ,sEAEF,sBACE,8BACO,+CAEP,4EAMOC,EA9HA,WAAO,IAAD,EACmBC,mBAAS,IAAvCC,EADW,KACCC,EADD,KASnB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAMX,GAAI,CAAEG,GAAI,EAAGF,SAAU,CAAE,EAAG,EAAG,KAArC,mCACA,YAAC,IAAD,CAAMW,GAAG,OAAOC,SAPD,SAACC,GAClBA,EAAEC,iBACFC,OAAOC,KAAP,gCAA4CC,mBAAmBR,GAA/D,8BAMI,YAAC,IAAD,CAAKV,GAAI,CAAEmB,KAAM,WAAYC,GAAI,IAC/B,YAAC,IAAD,CAAOC,SAZK,SAACP,GACnBH,EAAcG,EAAEQ,OAAOC,WAanB,YAAC,IAAD,KACE,YAAC,IAAD,CAAQC,KAAK,SAASxB,GAAI,CAAEyB,GAAI,EAAG,SAAU,CAAEC,QAAS,IAAOC,OAAQ,YAAvE,UACS,YAAC,IAAD,CAAiBC,KAAMC,SAKpC,2BACE,wDACA,YAAC,EAAD,SCeOC,EAtBE,SAAC,GAA0B,EAAxBC,MAGlB,OACE,YAAC,IAAD,KACE,uBAAS/B,GAAI,CAAEG,GAAI,CAAE,EAAG,EAAG,GAAK6B,EAAG,CAAE/B,SAAU,CAAE,EAAG,EAAG,MACrD,YAAC,EAAD,OAEF,uBAASD,GAAI,CAAEG,GAAI,CAAE,EAAG,EAAG,KACzB,YAAC,EAAD,OAOF,YAAC,EAAD,QCxCN,sCAEe8B,UCOA,YAAqB,IAC1BC,EAD0B,EAAlBC,KACRD,QAER,OAAO,kBAAC,EAAD,CAAUH,MAAOG,EAAQE,SDVnBH,IAEFI,EAAQ","file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx-d5d30f3718a5a369bb6f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Text = makeShortcode(\"Text\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Text sx={{\n      fontSize: [4, 5, 6],\n      fontWeight: 'bold',\n      mb: [1, 2, 3]\n    }} mdxType=\"Text\">Empirical China</Text>\n    <Text sx={{\n      fontSize: [2, 3, 3],\n      fontStyle: 'italic',\n      fontWeight: 350\n    }} mdxType=\"Text\">We share China-focused empirical research in the social sciences on Twitter.</Text>\n    <a href=\"https://twitter.com/empiricalchina\">Follow @empiricalchina</a>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { jsx } from 'theme-ui';\nimport { Text, Flex, Box, Input, Button } from '@theme-ui/components';\nimport { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst Search = () => {\n  const [ searchText, setSearchText ] = useState('');\n  const handleInput = (e) => {\n    setSearchText(e.target.value);\n  };\n  const openWindow = (e) => {\n    e.preventDefault();\n    window.open(`https://twitter.com/search?q=${encodeURIComponent(searchText)}%20from%3Aempiricalchina`);\n  };\n  return (\n    <Box>\n      <Text sx={{ mb: 2, fontSize: [ 1, 2, 3 ] }}>Find papers we've tweeted about</Text>\n      <Flex as=\"form\" onSubmit={openWindow}>\n        <Box sx={{ flex: '1 1 auto', mr: 1 }}>\n          <Input onChange={handleInput} />\n        </Box>\n        <Box>\n          <Button type=\"submit\" sx={{ ml: 1, ':hover': { opacity: 0.9 }, cursor: 'pointer' }}>\n            Search <FontAwesomeIcon icon={faExternalLinkAlt} />\n          </Button>\n        </Box>\n      </Flex>\n\n      <details>\n        <summary>Advanced search operators</summary>\n        <TwitterOperators />\n      </details>\n    </Box>\n  );\n};\n\nconst TwitterOperators = () => (\n  <table>\n    <thead>\n      <tr>\n        <th>Operator</th>\n        <th>Finds tweets...</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>twitter search</td>\n        <td>containing both \"twitter\" and \"search\". This is the default operator.</td>\n      </tr>\n      <tr>\n        <td>\n          <b>\"</b>happy hour<b>\"</b>\n        </td>\n        <td>containing the exact phrase \"happy hour\".</td>\n      </tr>\n      <tr>\n        <td>\n          love <b>OR</b> hate\n        </td>\n        <td>containing either \"love\" or \"hate\" (or both).</td>\n      </tr>\n      <tr>\n        <td>\n          beer <b>-</b>root\n        </td>\n        <td>containing \"beer\" but not \"root\".</td>\n      </tr>\n      <tr>\n        <td>\n          <b>#</b>haiku\n        </td>\n        <td>containing the hashtag \"haiku\".</td>\n      </tr>\n      <tr>\n        <td>\n          <b>from:</b>alexiskold\n        </td>\n        <td>sent from person \"alexiskold\".</td>\n      </tr>\n      <tr>\n        <td>\n          <b>to:</b>techcrunch\n        </td>\n        <td>sent to person \"techcrunch\".</td>\n      </tr>\n      <tr>\n        <td>\n          <b>@</b>mashable\n        </td>\n        <td>referencing person \"mashable\".</td>\n      </tr>\n      <tr>\n        <td>\n          \"happy hour\" <b>near:</b>\"san francisco\"\n        </td>\n        <td>containing the exact phrase \"happy hour\" and sent near \"san francisco\".</td>\n      </tr>\n      <tr>\n        <td>\n          <b>near:</b>NYC <b>within:</b>15mi\n        </td>\n        <td>sent within 15 miles of \"NYC\".</td>\n      </tr>\n      <tr>\n        <td>\n          superhero <b>since:</b>2010-12-27\n        </td>\n        <td>containing \"superhero\" and sent since date \"2010-12-27\" (year-month-day).</td>\n      </tr>\n      <tr>\n        <td>\n          ftw <b>until:</b>2010-12-27\n        </td>\n        <td>containing \"ftw\" and sent up to date \"2010-12-27\".</td>\n      </tr>\n      <tr>\n        <td>\n          hilarious <b>filter:links</b>\n        </td>\n        <td>containing \"hilarious\" and linking to URLs.</td>\n      </tr>\n      <tr>\n        <td>\n          news <b>source:\"Twitter Lite\"</b>\n        </td>\n        <td>containing \"news\" and entered via Twitter Lite</td>\n      </tr>\n    </tbody>\n  </table>\n);\n\nexport default Search;\n","/** @jsx jsx */\nimport { jsx } from 'theme-ui';\n// import { Link } from 'gatsby';\nimport Layout from '@lekoarts/gatsby-theme-minimal-blog/src/components/layout';\nimport Hero from '../texts/hero';\nimport Bottom from '../texts/bottom';\n// import Title from '@lekoarts/gatsby-theme-minimal-blog/src/components/title';\n// import Listing from '@lekoarts/gatsby-theme-minimal-blog/src/components/listing';\n// import List from '@lekoarts/gatsby-theme-minimal-blog/src/components/list';\nimport useSiteMetadata from '@lekoarts/gatsby-theme-minimal-blog/src/hooks/use-site-metadata';\n// import replaceSlashes from '@lekoarts/gatsby-theme-minimal-blog/src/utils/replaceSlashes';\nimport Search from '../../../components/search';\n\ntype PostsProps = {\n  posts: {\n    slug: string;\n    title: string;\n    date: string;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  }[];\n};\n\nconst Homepage = ({ posts }: PostsProps) => {\n  // const { basePath, blogPath } = useSiteMetadata();\n\n  return (\n    <Layout>\n      <section sx={{ mb: [ 2, 3, 4 ], p: { fontSize: [ 1, 2, 3 ] } }}>\n        <Hero />\n      </section>\n      <section sx={{ mb: [ 2, 3, 4 ] }}>\n        <Search />\n      </section>\n      {/* <Title text=\"Latest Posts\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>Read all posts</Link>\n      </Title>\n      <Listing posts={posts} showTags={false} />\n      <List> */}\n      <Bottom />\n      {/* </List> */}\n    </Layout>\n  );\n};\n\nexport default Homepage;\n","import { graphql } from \"gatsby\"\r\nimport HomepageComponent from \"../components/homepage\"\r\n\r\nexport default HomepageComponent\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\r\n      nodes {\r\n        slug\r\n        title\r\n        date(formatString: \"DD.MM.YYYY\")\r\n        tags {\r\n          name\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport Homepage from \"../../../components/homepage\"\r\n\r\ntype Props = {\r\n  data: {\r\n    allPost: any\r\n    [key: string]: string\r\n  }\r\n}\r\n\r\nexport default ({ data }: Props) => {\r\n  const { allPost } = data\r\n\r\n  return <Homepage posts={allPost.nodes} />\r\n}\r\n"],"sourceRoot":""}